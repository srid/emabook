# These variables are made globally available in the HTML templates.
# Make sure that they do not conflict with HTML tag names.
# You can override them on a per-note or per-directory basis by creating the
# associated .yaml file.

# Order is used by Emanote to determine the sidebar order of notes.
order: 0

tags: []

# TODO: How to design this when generating RSS feeds?
template:
  # Which template to use to render notes. The filepath without the .tpl extension.
  name: /templates/layouts/book
  # Layout specific settings
  layout:
    # For base.tpl
    base:  
      # The class to apply for <body> element when using base.tpl (used by note and book layouts)
      bodyClass: bg-gray-400 overflow-y-scroll
    note:
      containerClass: container mx-auto max-w-prose
  error:
    containerClass: container mx-auto max-w-prose
  uptree:
    # Class to apply for uptree's nodes
    nodeClass: text-gray-900
  # List of available colors: https://v2.tailwindcss.com/docs/customizing-colors#default-color-palette
  theme: blue
  # Value of the <base> tag.
  baseUrl: /
  urlStrategy: direct
  iconUrl: ${ema:homeUrl}favicon.svg
  sidebar:
    # Whether this node in the sidebar tree should remain collapsed by default
    # (unless a route in it is active)
    collapsed: true

pandoc:
  # Rewrite the class specified in Pandoc's Div and Span nodes. You can specify the class using
  # https://github.com/jgm/commonmark-hs/blob/master/commonmark-extensions/test/attributes.md
  #
  # This feature is useful when managing a "library" of CSS styling to use on
  # Markdown text, especially when using Tailwind.
  rewriteClass:
    # How to style inline tags. Tag-specific styles can be applied as well.
    emanote:inline-tag: font-bold bg-gray-100 py-0.5 px-2 rounded-lg
    # This style is used by `#a/red/tag` in addition to the generic style above.
    # As this class comes *after* the generic class, it can override the styles
    # in the generic class.
    emanote:inline-tag:a/red/tag: bg-red-100
    emanote:placeholder-message: text-gray-400 border-t-2 inline-block pt-0.5
    emanote:error: text-l bg-red-100 p-2 border-2 border-black m-2 font-mono
    emanote:error:aside: font-mono align-top text-xs mr-1 tracking-tighter opacity-50 hover:opacity-100 
    # You can also add your own class -> style mappings. We provide a sample below.
    sticky-note: px-3 py-1 rounded shadow bg-yellow-100 mx-2 transform -skew-y-1 scale-95 hover:scale-100 hover:border-yellow-400 hover:shadow-lg border-t-8 border-yellow-200 mb-8 mt-8
    note: p-2 mb-3 rounded shadow bg-gray-100 w-full float-none md:float-right md:w-1/2 md:clear-both 
    highlight-block: px-3 py-1 mb-3 rounded bg-${theme}-100 hover:border-${theme}-400 hover:shadow border-t-8 border-${theme}-200
    highlight-inline: bg-yellow-200 px-2 py-0.5 rounded-xl
    center: flex justify-center items-center mx-auto

# Put page-specific metadata here. Override them in Markdown frontmatter or
# per-folder YAML as necessary.
page:
  siteTitle: My Emanote Site
  # Desription is expected to be set on a per-page basis.
  # HACK: We are setting it to empty here, because Heist doesn't work well otherwise.
  description: ""
  # Put anything that should go in <head> of these routes here:
  # You can reference other metadata keys using <snippet var=".." />
  # Or use the JS behaviour library below.
  headHtml: |
    <meta name="generator" content="Emanote" />

# Builtin JS behaviour library. Use them in `page.headHtml` of your .yaml or .md
# frontmatter.
js:
  # Syntax highlighting using prism.js
  prism: |
    <!-- Prism.js -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.26.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.26.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.26.0/plugins/autoloader/prism-autoloader.min.js"></script>
  # Syntax highlighting using highlight.js
  highlightjs: |
    <!-- highlight.js -->
    <link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/hybrid.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>
  # Diagrams using mermaid.js
  mermaid: |
    <!-- mermaid.js -->
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <script>
      mermaid.initialize({startOnLoad:false});
      mermaid.init(undefined,document.querySelectorAll(".mermaid"));
    </script>
  mathjax: |
    <script>
      window.MathJax = {
        startup: {
          ready: () => {
            MathJax.startup.defaultReady();
          }
        }
      };
    </script>
    <script async="" id="MathJax-script" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>


